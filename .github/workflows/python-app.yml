# Workflow name as displayed in GitHub Actions UI
name: Python application

# Define when this workflow should run
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

# Security: Limit permissions to read-only
permissions:
  contents: read

jobs:
  build:  # Main job that handles testing and linting
    runs-on: ubuntu-latest  # Use latest Ubuntu runner

    steps:
    # Step 1: Check out the repository code
    - uses: actions/checkout@v4
    
    # Step 2: Set up Python environment
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    # Step 3: Install all required dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  # Ensure pip is up to date
        pip cache purge  # Clear pip cache to avoid dependency conflicts
        pip install -r requirements.txt  # Install project dependencies
        pip install flake8 pytest  # Install testing tools
    
    # Step 4: Configure environment variables for testing
    - name: Set up environment variables
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=github-actions-test-key" >> $GITHUB_ENV
        echo "DATABASE_URL=sqlite:///:memory:" >> $GITHUB_ENV  # Use in-memory SQLite for tests
        echo "HUGGINGFACE_API_KEY=dummy-key-for-testing" >> $GITHUB_ENV
    
    # Step 5: Run code quality checks with flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # Step 6: Run the test suite
    - name: Test with pytest
      run: |
        python -m pytest tests/ -v  # Run tests with verbose output
